[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Freddy Hernandez-Barajas. Author, maintainer. Fernando Marmolejo-Ramos. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hernandez-Barajas F, Marmolejo-Ramos F (2022). RealDists: Real Statistical Distributions. R package version 0.0.0.9000, https://github.com/fhernanb/RealDists.","code":"@Manual{,   title = {RealDists: Real Statistical Distributions},   author = {Freddy Hernandez-Barajas and Fernando Marmolejo-Ramos},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://github.com/fhernanb/RealDists}, }"},{"path":"/index.html","id":"realdists-","dir":"","previous_headings":"","what":"Real Statistical Distributions","title":"Real Statistical Distributions","text":"package available statistical distributions defined  support. package possible estimate parameters fit regression models within GAMLSS framework.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Real Statistical Distributions","text":"install RealDists package need install devtools package , follow instructions : can visit package website explore vignettes (articles) function reference.","code":"if (!require('devtools')) install.packages('devtools') devtools::install_github('fhernanb/RealDists', force=TRUE) library(RealDists)"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 RealDists authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/dGEG.html","id":null,"dir":"Reference","previous_headings":"","what":"The Generalised exponential-Gaussian distribution — dGEG","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"Density, distribution function, quantile function, random generation hazard function Generalised exponential-Gaussian distribution parameters mu, sigma, nu tau.","code":""},{"path":"/reference/dGEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"","code":"dGEG(x, mu = 0, sigma = 1, nu = 1, tau = 1, log = FALSE)  pGEG(q, mu = 0, sigma = 1, nu = 1, tau = 1, lower.tail = TRUE, log.p = FALSE)  qGEG(p, mu = 0, sigma = 1, nu = 1, tau = 1)  rGEG(n = 1, mu = 0, sigma = 1, nu = 1, tau = 1)"},{"path":"/reference/dGEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"x, q vector quantiles. mu parameter. sigma parameter. nu parameter. tau parameter. log, log.p logical; TRUE, probabilities p given log(p). lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. p vector probabilities. n number observations.","code":""},{"path":"/reference/dGEG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"dGEG gives density, pGEG gives distribution function, qGEG gives quantile function, rGEG generates random deviates.","code":""},{"path":"/reference/dGEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"Generalised exponential-Gaussian parameters mu, sigma, nu tau density given \\(f(x | \\mu, \\sigma, \\nu, \\tau) = \\frac{\\tau}{\\nu} \\exp(w) \\Phi \\left( z - \\frac{\\sigma}{\\nu} \\right) \\left[ \\Phi(z) - \\exp(w)  \\Phi \\left( z - \\frac{\\sigma}{\\nu} \\right) \\right]^{\\tau-1}\\) \\(-\\infty < x < \\infty\\). \\(w=\\frac{\\mu-x}{\\nu} + \\frac{\\sigma^2}{2\\nu^2}\\), \\(z=\\frac{x-\\mu}{\\sigma}\\), \\(\\Phi\\) cumulative function standard normal distribution.","code":""},{"path":"/reference/dGEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Generalised exponential-Gaussian distribution — dGEG","text":"","code":"## The probability density function curve(dGEG(x, mu=7, sigma=0.25, nu=0.05, tau=1),       from=0, to=10, col=\"red\", las=1, ylab=\"f(x)\")  curve(dGEG(x, mu=7, sigma=0.25, nu=0.05, tau=0.5),       add=TRUE, col=\"blue3\")  curve(dGEG(x, mu=7, sigma=0.25, nu=0.05, tau=0.1),       add=TRUE, col=\"green4\")  legend(\"topleft\", col=c(\"red\", \"blue3\", \"green4\"), lty=1, bty=\"n\",        legend=c(\"mu=7, sigma=0.25, nu=0.05, tau=1\",                 \"mu=7, sigma=0.25, nu=0.05, tau=0.5\",                 \"mu=7, sigma=0.25, nu=0.05, tau=0.1\"))   ## The cumulative distribution function curve(pGEG(x, mu=-5, sigma=0.25, nu=0.05, tau=1), from=-10, to=10,       col=\"red\", las=1, ylab=\"F(x)\") curve(pGEG(x, mu=-2, sigma=0.25, nu=0.05, tau=0.5),       add=TRUE, col=\"blue3\", las=1)   ## The quantile function p <- seq(from=0, to=0.99999, length.out=100) plot(x=qGEG(p, mu=7, sigma=0.25, nu=0.05, tau=1), y=p, xlab=\"Quantile\",      las=1, ylab=\"Probability\") curve(pGEG(x, mu=7, sigma=0.25, nu=0.05, tau=1), from=0, add=TRUE, col=\"red\")   ## The random function hist(rGEG(n=1000, mu=7, sigma=0.25, nu=0.05, tau=1), freq=FALSE, xlab=\"x\",      ylim=c(0, 2), las=1, main=\"\") curve(dGEG(x, mu=7, sigma=0.25, nu=0.05, tau=1), add=TRUE, col=\"red\")"},{"path":"/reference/estim_mu_sigma_nu_tau_GEG.html","id":null,"dir":"Reference","previous_headings":"","what":"estim_mu_sigma_nu_tau_GEG — estim_mu_sigma_nu_tau_GEG","title":"estim_mu_sigma_nu_tau_GEG — estim_mu_sigma_nu_tau_GEG","text":"function generates initial values GEG distribution.","code":""},{"path":"/reference/estim_mu_sigma_nu_tau_GEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"estim_mu_sigma_nu_tau_GEG — estim_mu_sigma_nu_tau_GEG","text":"","code":"estim_mu_sigma_nu_tau_GEG(y)"},{"path":"/reference/estim_mu_sigma_nu_tau_GEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"estim_mu_sigma_nu_tau_GEG — estim_mu_sigma_nu_tau_GEG","text":"y vector random sample","code":""},{"path":"/reference/estim_mu_sigma_nu_tau_GEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"estim_mu_sigma_nu_tau_GEG — estim_mu_sigma_nu_tau_GEG","text":"","code":"y <- rGEG(n=100, mu=1, sigma=1, nu=1, tau=1) estim_mu_sigma_nu_tau_GEG(y=y) #>    mu_hat sigma_hat    nu_hat   tau_hat  #> 2.7154648 0.4186457 1.5694556 0.1048623"},{"path":"/reference/GEG.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalised exponential-Gaussian family — GEG","title":"Generalised exponential-Gaussian family — GEG","text":"function GEG() defines Generalised exponential-Gaussian distribution, four parameter distribution, gamlss.family object used GAMLSS fitting using function gamlss().","code":""},{"path":"/reference/GEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalised exponential-Gaussian family — GEG","text":"","code":"GEG(   mu.link = \"identity\",   sigma.link = \"log\",   nu.link = \"log\",   tau.link = \"log\" )"},{"path":"/reference/GEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalised exponential-Gaussian family — GEG","text":"mu.link defines mu.link, \"identity\" link default mu parameter. sigma.link defines sigma.link, \"log\" link default sigma. nu.link defines nu.link, \"log\" link default nu. tau.link defines tau.link, \"log\" link default tau.","code":""},{"path":"/reference/GEG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalised exponential-Gaussian family — GEG","text":"Generalised exponential-Gaussian parameters mu, sigma, nu tau density given \\(f(x | \\mu, \\sigma, \\nu, \\tau) = \\frac{\\tau}{\\nu} \\exp(w) \\Phi \\left( z - \\frac{\\sigma}{\\nu} \\right) \\left[ \\Phi(z) - \\exp(w)  \\Phi \\left( z - \\frac{\\sigma}{\\nu} \\right) \\right]^{\\tau-1}\\) \\(-\\infty < x < \\infty\\). \\(w=\\frac{\\mu-x}{\\nu} + \\frac{\\sigma^2}{2\\nu^2}\\) \\(z=\\frac{x-\\mu}{\\sigma}\\) \\(\\Phi\\) cumulative function standard normal distribution.","code":""},{"path":"/reference/GEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalised exponential-Gaussian family — GEG","text":"","code":"# Example 1 - without covariates ------------------------------------------  n <- 100  # The true parameters are: true_mu <- -5 true_si <- 4 true_nu <- 2.5 true_ta <- 1 true_theta <- c(true_mu, true_si, true_nu, true_ta)  # Graphing the pdf curve(dGEG(x, mu=true_mu, sigma=true_si, nu=true_nu, tau=true_ta),       ylab=\"Density\", xlab=\"X\", las=1,       from=-25, to=25, lwd=3, col=\"tomato\")   # Simulating a random sample y <- rGEG(n=n, mu=true_mu, sigma=true_si, nu=true_nu, tau=true_ta)  # Estimating paramaters library(gamlss) #> Loading required package: splines #> Loading required package: gamlss.data #>  #> Attaching package: 'gamlss.data' #> The following object is masked from 'package:datasets': #>  #>     sleep #> Loading required package: gamlss.dist #> Loading required package: MASS #> Loading required package: nlme #> Loading required package: parallel #>  **********   GAMLSS Version 5.4-3  **********  #> For more on GAMLSS look at https://www.gamlss.com/ #> Type gamlssNews() to see new features/changes/bug fixes. mod <- gamlss(y ~ 1, family=GEG,               control=gamlss.control(n.cyc=1000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 597.0077  #> GAMLSS-RS iteration 2: Global Deviance = 597.0062  #> GAMLSS-RS iteration 3: Global Deviance = 597.0048  #> GAMLSS-RS iteration 4: Global Deviance = 597.0035  #> GAMLSS-RS iteration 5: Global Deviance = 597.0022  #> GAMLSS-RS iteration 6: Global Deviance = 597.001  #> GAMLSS-RS iteration 7: Global Deviance = 596.9998  #> GAMLSS-RS iteration 8: Global Deviance = 596.9987  #> GAMLSS-RS iteration 9: Global Deviance = 596.9975  #> GAMLSS-RS iteration 10: Global Deviance = 596.9964  #> GAMLSS-RS iteration 11: Global Deviance = 596.9953  #> GAMLSS-RS iteration 12: Global Deviance = 596.9942  #> GAMLSS-RS iteration 13: Global Deviance = 596.993  #> GAMLSS-RS iteration 14: Global Deviance = 596.9919  #> GAMLSS-RS iteration 15: Global Deviance = 596.9908  #> GAMLSS-RS iteration 16: Global Deviance = 596.9896  #> GAMLSS-RS iteration 17: Global Deviance = 596.9885  #> GAMLSS-RS iteration 18: Global Deviance = 596.9873  #> GAMLSS-RS iteration 19: Global Deviance = 596.9861  #> GAMLSS-RS iteration 20: Global Deviance = 596.9849  #> GAMLSS-RS iteration 21: Global Deviance = 596.9837  #> GAMLSS-RS iteration 22: Global Deviance = 596.9826  #> GAMLSS-RS iteration 23: Global Deviance = 596.9814  #> GAMLSS-RS iteration 24: Global Deviance = 596.9801  #> GAMLSS-RS iteration 25: Global Deviance = 596.9789  #> GAMLSS-RS iteration 26: Global Deviance = 596.9777  #> GAMLSS-RS iteration 27: Global Deviance = 596.9765  #> GAMLSS-RS iteration 28: Global Deviance = 596.9753  #> GAMLSS-RS iteration 29: Global Deviance = 596.974  #> GAMLSS-RS iteration 30: Global Deviance = 596.9728  #> GAMLSS-RS iteration 31: Global Deviance = 596.9716  #> GAMLSS-RS iteration 32: Global Deviance = 596.9703  #> GAMLSS-RS iteration 33: Global Deviance = 596.9691  #> GAMLSS-RS iteration 34: Global Deviance = 596.9679  #> GAMLSS-RS iteration 35: Global Deviance = 596.9666  #> GAMLSS-RS iteration 36: Global Deviance = 596.9654  #> GAMLSS-RS iteration 37: Global Deviance = 596.9641  #> GAMLSS-RS iteration 38: Global Deviance = 596.9629  #> GAMLSS-RS iteration 39: Global Deviance = 596.9617  #> GAMLSS-RS iteration 40: Global Deviance = 596.9604  #> GAMLSS-RS iteration 41: Global Deviance = 596.9592  #> GAMLSS-RS iteration 42: Global Deviance = 596.958  #> GAMLSS-RS iteration 43: Global Deviance = 596.9567  #> GAMLSS-RS iteration 44: Global Deviance = 596.9555  #> GAMLSS-RS iteration 45: Global Deviance = 596.9543  #> GAMLSS-RS iteration 46: Global Deviance = 596.9531  #> GAMLSS-RS iteration 47: Global Deviance = 596.9518  #> GAMLSS-RS iteration 48: Global Deviance = 596.9506  #> GAMLSS-RS iteration 49: Global Deviance = 596.9494  #> GAMLSS-RS iteration 50: Global Deviance = 596.9482  #> GAMLSS-RS iteration 51: Global Deviance = 596.947  #> GAMLSS-RS iteration 52: Global Deviance = 596.9458  #> GAMLSS-RS iteration 53: Global Deviance = 596.9446  #> GAMLSS-RS iteration 54: Global Deviance = 596.9434  #> GAMLSS-RS iteration 55: Global Deviance = 596.9422  #> GAMLSS-RS iteration 56: Global Deviance = 596.941  #> GAMLSS-RS iteration 57: Global Deviance = 596.9398  #> GAMLSS-RS iteration 58: Global Deviance = 596.9386  #> GAMLSS-RS iteration 59: Global Deviance = 596.9374  #> GAMLSS-RS iteration 60: Global Deviance = 596.9363  #> GAMLSS-RS iteration 61: Global Deviance = 596.9351  #> GAMLSS-RS iteration 62: Global Deviance = 596.9339  #> GAMLSS-RS iteration 63: Global Deviance = 596.9328  #> GAMLSS-RS iteration 64: Global Deviance = 596.9316  #> GAMLSS-RS iteration 65: Global Deviance = 596.9304  #> GAMLSS-RS iteration 66: Global Deviance = 596.9293  #> GAMLSS-RS iteration 67: Global Deviance = 596.9281  #> GAMLSS-RS iteration 68: Global Deviance = 596.927  #> GAMLSS-RS iteration 69: Global Deviance = 596.9258  #> GAMLSS-RS iteration 70: Global Deviance = 596.9247  #> GAMLSS-RS iteration 71: Global Deviance = 596.9236  #> GAMLSS-RS iteration 72: Global Deviance = 596.9224  #> GAMLSS-RS iteration 73: Global Deviance = 596.9213  #> GAMLSS-RS iteration 74: Global Deviance = 596.9202  #> GAMLSS-RS iteration 75: Global Deviance = 596.9191  #> GAMLSS-RS iteration 76: Global Deviance = 596.9179  #> GAMLSS-RS iteration 77: Global Deviance = 596.9168  #> GAMLSS-RS iteration 78: Global Deviance = 596.9157  #> GAMLSS-RS iteration 79: Global Deviance = 596.9146  #> GAMLSS-RS iteration 80: Global Deviance = 596.9135  #> GAMLSS-RS iteration 81: Global Deviance = 596.9124  #> GAMLSS-RS iteration 82: Global Deviance = 596.9113  #> GAMLSS-RS iteration 83: Global Deviance = 596.9102  #> GAMLSS-RS iteration 84: Global Deviance = 596.9091  #> GAMLSS-RS iteration 85: Global Deviance = 596.9081  #> GAMLSS-RS iteration 86: Global Deviance = 596.907  #> GAMLSS-RS iteration 87: Global Deviance = 596.9059  #> GAMLSS-RS iteration 88: Global Deviance = 596.9048  #> GAMLSS-RS iteration 89: Global Deviance = 596.9038  #> GAMLSS-RS iteration 90: Global Deviance = 596.9027  #> GAMLSS-RS iteration 91: Global Deviance = 596.9016  #> GAMLSS-RS iteration 92: Global Deviance = 596.9006  #> GAMLSS-RS iteration 93: Global Deviance = 596.8995  #> GAMLSS-RS iteration 94: Global Deviance = 596.8985  #> GAMLSS-RS iteration 95: Global Deviance = 596.8974  #> GAMLSS-RS iteration 96: Global Deviance = 596.8964  #> GAMLSS-RS iteration 97: Global Deviance = 596.8954  #> GAMLSS-RS iteration 98: Global Deviance = 596.8943  #> GAMLSS-RS iteration 99: Global Deviance = 596.8933  #> GAMLSS-RS iteration 100: Global Deviance = 596.8923  #> GAMLSS-RS iteration 101: Global Deviance = 596.8912  #> GAMLSS-RS iteration 102: Global Deviance = 596.8902  #> GAMLSS-RS iteration 103: Global Deviance = 596.8892  #> GAMLSS-RS iteration 104: Global Deviance = 596.8882  #> GAMLSS-RS iteration 105: Global Deviance = 596.8872  #> GAMLSS-RS iteration 106: Global Deviance = 596.8862  #> GAMLSS-RS iteration 107: Global Deviance = 596.8852  #> GAMLSS-RS iteration 108: Global Deviance = 596.8842   # Vector with the estimated results res <- c(mu_hat=coef(mod, what=\"mu\"),          sigma_hat=exp(coef(mod, what=\"sigma\")),          nu_hat=exp(coef(mod, what=\"nu\")),          tau_hat=exp(coef(mod, what=\"tau\")))  # Comparing true vector and estimated vector round(cbind(true_theta, with_GEG=res), digits=2) #>                       true_theta with_GEG #> mu_hat.(Intercept)          -5.0    -1.51 #> sigma_hat.(Intercept)        4.0     3.66 #> nu_hat.(Intercept)           2.5     1.54 #> tau_hat.(Intercept)          1.0     0.52  # Histogram, estimated density and true density truehist(y, ylab=\"Density\", col=\"gray\", las=1)  curve(dGEG(x, mu=res[1], sigma=res[2], nu=res[3], tau=res[4]),       add=TRUE, col=\"blue2\", lwd=2)  curve(dGEG(x, mu=true_theta[1], sigma=true_theta[2],            nu=true_theta[3], tau=true_theta[4]),       add=TRUE, col=\"green4\", lwd=2)  legend(\"topright\", lwd=2, bty=\"n\",        legend=c(\"with GEG\", \"true density\"),        col=c(\"blue2\", \"green4\"))    # Example 2 - with covariates --------------------------------------------- n <- 5000  # The true parameters are: b0_mu <- -1 b1_mu <-  2  b0_sigma <- -2 b1_sigma <-  4  true_nu <- 0.5 true_ta <- 0.75  # The true theta vector true_theta <- c(b0_mu, b1_mu, b0_sigma, b1_sigma, true_nu, true_ta)  # Simulating covariates x1 <- runif(n, min=0.49, max=0.51) x2 <- runif(n, min=0.49, max=0.51)  # Simulating a random sample y <- rGEG(n=n,           mu    =     b0_mu    + b1_mu    * x1,           sigma = exp(b0_sigma + b1_sigma * x2),           nu    = true_nu,           tau   = true_ta)  # The dataframe datos <- data.frame(y=y, x1=x1, x2=x2)  # Estimating paramaters # Using gamlss with our proposal mod <- gamlss(y ~ x1,               sigma.fo = ~ x2,               family=GEG,               control=gamlss.control(n.cyc=10000, trace=TRUE)) #> GAMLSS-RS iteration 1: Global Deviance = 16083.45  #> GAMLSS-RS iteration 2: Global Deviance = 16083.44  #> GAMLSS-RS iteration 3: Global Deviance = 16083.44   # To obtain the estimated parameters param <- unlist(coefAll(mod))  # Comparing true vector and estimated vector res <- cbind(true_theta, with_gamlss=c(param[1:4], exp(param[5:6]))) round(res, digits=2) #>                   true_theta with_gamlss #> mu.(Intercept)         -1.00       -0.66 #> mu.x1                   2.00        1.15 #> sigma.(Intercept)      -2.00       -2.70 #> sigma.x2                4.00        5.52 #> nu.(Intercept)          0.50        0.47 #> tau.(Intercept)         0.75        0.85"},{"path":"/reference/logLik_GEG.html","id":null,"dir":"Reference","previous_headings":"","what":"logLik_GEG — logLik_GEG","title":"logLik_GEG — logLik_GEG","text":"auxiliar function obtain logLik GEG.","code":""},{"path":"/reference/logLik_GEG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logLik_GEG — logLik_GEG","text":"","code":"logLik_GEG(logparam = c(0, 0, 0, 0), x)"},{"path":"/reference/logLik_GEG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logLik_GEG — logLik_GEG","text":"logparam vector values mu, sigma, nu tau x vector data","code":""},{"path":"/reference/logLik_GEG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logLik_GEG — logLik_GEG","text":"","code":"y <- rGEG(n=100, mu=1, sigma=1, nu=1, tau=1) logLik_GEG(logparam=c(0, 0, 0, 0), x=y) #> [1] -197.443"}]
